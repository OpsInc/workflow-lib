---
# yamllint disable rule:line-length rule:truthy

on:
  workflow_call:
    inputs:
      REPO_STYLE:
        required: false
        type: string
        default: monorepo
      S3_BUCKET:
        required: true
        type: string

env:
  RED: '\033[0;31m'
  GREEN: '\033[0;32m'
  YELLOW: '\033[1;33m'
  H_GREEN: '\033[97;42m'
  H_WHITE: '\033[90;47m'
  H_YELLOW: '\033[90;43m'
  H_RED: '\033[97;41m'
  H_BLUE: '\033[97;44m'
  H_MAGENTA: '\033[97;45m'
  H_CYAN: '\033[97;46m'
  NC: '\033[0m' # No Color
  AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

jobs:
  lint:
    name: Code Linting
    env:
      TFVARS_PATH: vars
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4

      - uses: actions/setup-go@v4
        with:
          go-version: "stable"
          cache: false

      # - name: golangci-lint
      #   uses: golangci/golangci-lint-action@v3
      #   with:
      #     version: latest
      #     args: >
      #       --enable-all
      #       -D varnamelen -D interfacer -D maligned -D golint -D scopelint -D exhaustivestruct
      #       -D bodyclose -D contextcheck -D nilerr -D noctx -D rowserrcheck -D sqlclosecheck
      #       -D structcheck -D tparallel -D wastedassign -D gci -D gosimple -D ifshort -D lll
      #       -D usestdlibvars -D paralleltest -D depguard -D varcheck -D deadcode -D nosnakecase

  build:
    name: Build Code
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    needs: lint
    outputs:
      deploy-code: ${{ steps.go-build.outputs.deploy-code }}
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: actions/setup-go@v4
        with:
          go-version: stable
          cache: false

      - name: Go Build
        id: go-build
        run: |
          git fetch --all --tags

          GIT_COMMIT_MSG=$(git log --oneline | grep -v Merge | head  -n1)
          GIT_DIFF=$(git diff-tree --no-commit-id --name-only -r $(git log --oneline | grep -v Merge | head  -n1 |awk '{print $1}'))

          if [[ ${{ inputs.REPO_STYLE }} == 'standard' ]]
          then
            CGO_ENABLED=0 go build -o ./bin/bootstrap
            echo "deploy-code=true" >>$GITHUB_OUTPUT
          elif [[ ${{ inputs.REPO_STYLE }} == 'monorepo' ]]
          then
            if [[ $(echo $GIT_DIFF | sed 's/ /\n/g' | grep '^internal') || $GIT_COMMIT_MSG == *'[force-build]'* ]]
            then
              for module in $(ls ./cmd)
              do
                echo -e "BUILD: ${YELLOW}Compiling module ${module} into ./bin${NC}"
                CGO_ENABLED=0 go build -o ./bin/$module/main ./cmd/$module/
              done
              echo "deploy-code=true" >>$GITHUB_OUTPUT
            elif [[ $(echo $GIT_DIFF | sed 's/ /\n/g' | grep '^cmd') ]]
            then
              package_changed=$(echo $GIT_DIFF | sed 's/ /\n/g' | grep '^cmd' | cut -d '/' -f 2)
              for module in $package_changed
              do
                echo -e "BUILD: ${YELLOW}Compiling module ${module} into ./bin${NC}"
                CGO_ENABLED=0 go build -o ./bin/$module/main ./cmd/$module/
              done
              echo "deploy-code=true" >>$GITHUB_OUTPUT
            else
              echo "deploy-code=false" >>$GITHUB_OUTPUT
            fi
          fi

      - name: Upload Artifact
        uses: actions/upload-artifact@v3
        with:
          name: go-code-artifact
          path: bin/
          retention-days: 1

  aws-push-artifact-to-s3:
    name: Push artifact to S3
    if: github.event_name == 'pull_request' && needs.build.outputs.deploy-code == 'true'
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download Artifact
        uses: actions/download-artifact@v3
        with:
          name: go-code-artifact
          path: bin/

      - name: Push Artifact to S3
        run: |
          git fetch --all --tags

          VERSION=$(cat VERSION)
          REPO=$(basename $GITHUB_REPOSITORY)

          for module in $(ls -A ./bin); do
            echo -e "${GREEN}PUSH TO S3: ${YELLOW}Files in module ./bin/${module} will be pushed to lambda ${{ inputs.S3_BUCKET }}${NC}"
            FILE_TYPE=$(file --brief ${module})

            if [[ $FILE_TYPE == "directory" ]]
            then
              aws s3 cp ./bin/${module} s3://${{ inputs.S3_BUCKET }}/${VERSION}/${module} --recursive
            else
              aws s3 cp ./bin/${module} s3://${{ inputs.S3_BUCKET }}/${REPO}/${VERSION}/${module}
            fi
          done
